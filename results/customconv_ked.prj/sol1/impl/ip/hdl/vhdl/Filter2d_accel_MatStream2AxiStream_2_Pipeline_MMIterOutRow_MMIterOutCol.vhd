-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2d_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutput_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgOutput_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput_data_empty_n : IN STD_LOGIC;
    imgOutput_data_read : OUT STD_LOGIC;
    ldata_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_full_n : IN STD_LOGIC;
    ldata_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (15 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    localbuffer_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    localbuffer_out_ap_vld : OUT STD_LOGIC;
    filled_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    filled_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Filter2d_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln1301_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1315_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op41_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal icmp_ln1301_reg_427_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1324_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1324_reg_475_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op76_write_state8 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1301_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgOutput_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ldata_blk_n : STD_LOGIC;
    signal val_1_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1301_reg_427_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1301_reg_427_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1301_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1301_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1294_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1294_reg_436 : STD_LOGIC_VECTOR (15 downto 0);
    signal bLast_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1315_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1306_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1306_reg_451 : STD_LOGIC_VECTOR (15 downto 0);
    signal xf_bits_per_clock_fu_242_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xf_bits_per_clock_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal filled_1_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1324_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1332_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1332_reg_479 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_484_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1332_1_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1332_1_reg_489 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1333_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1320_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1332_reg_514 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1332_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_val_1_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_val_1_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_val_1_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_conv3_i12_i_i933_pn_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal filled_fu_76 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal filled_next_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal localbuffer_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal localbuffer_2_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_1_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1306_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1306_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1313_fu_255_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1324_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1320_2_fu_258_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1332_fu_280_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1332_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2d_accel_shl_8ns_4ns_8_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter2d_accel_shl_8ns_3ns_8_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter2d_accel_lshr_8ns_8ns_8_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter2d_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    shl_8ns_4ns_8_2_1_U186 : component Filter2d_accel_shl_8ns_4ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter2_val_1_reg_149,
        din1 => grp_fu_306_p1,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    shl_8ns_3ns_8_2_1_U187 : component Filter2d_accel_shl_8ns_3ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter2_val_1_reg_149,
        din1 => grp_fu_315_p1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    lshr_8ns_8ns_8_2_1_U188 : component Filter2d_accel_lshr_8ns_8ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val_1_reg_149,
        din1 => grp_fu_338_p1,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p2);

    flow_control_loop_pipe_sequential_init_U : component Filter2d_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_268_p2 = ap_const_lv1_1) and (icmp_ln1301_reg_427_pp0_iter1_reg = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161 <= xf_bits_per_clock_reg_456;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_268_p2 = ap_const_lv1_0) and (icmp_ln1301_reg_427_pp0_iter1_reg = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161 <= xor_ln1333_fu_298_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161 <= ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_161;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_val_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1315_reg_447 = ap_const_lv1_0) and (icmp_ln1301_reg_427 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter2_val_1_reg_149 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1315_reg_447 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1301_reg_427_pp0_iter1_reg = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter2_val_1_reg_149 <= val_reg_463;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter2_val_1_reg_149 <= ap_phi_reg_pp0_iter1_val_1_reg_149;
            end if; 
        end if;
    end process;

    filled_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                filled_fu_76 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                filled_fu_76 <= filled_next_fu_321_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv32_0;
                elsif (((icmp_ln1301_reg_427 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_88 <= add_ln1301_reg_431;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_84 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1301_reg_427 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_84 <= add_ln1306_reg_451;
            end if; 
        end if;
    end process;

    localbuffer_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                localbuffer_fu_80 <= ap_const_lv8_0;
            elsif (((icmp_ln1324_reg_475_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln1301_reg_427_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                localbuffer_fu_80 <= localbuffer_1_fu_347_p2;
            elsif (((icmp_ln1324_reg_475_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1301_reg_427_pp0_iter3_reg = ap_const_lv1_0))) then 
                localbuffer_fu_80 <= localbuffer_2_fu_358_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln1301_reg_431 <= add_ln1301_fu_198_p2;
                icmp_ln1301_reg_427 <= icmp_ln1301_fu_193_p2;
                icmp_ln1301_reg_427_pp0_iter1_reg <= icmp_ln1301_reg_427;
                icmp_ln1301_reg_427_pp0_iter2_reg <= icmp_ln1301_reg_427_pp0_iter1_reg;
                icmp_ln1301_reg_427_pp0_iter3_reg <= icmp_ln1301_reg_427_pp0_iter2_reg;
                lshr_ln1332_reg_524 <= grp_fu_338_p2;
                select_ln1294_reg_436 <= select_ln1294_fu_212_p3;
                val_reg_463 <= imgOutput_data_dout;
                xf_bits_per_clock_reg_456 <= xf_bits_per_clock_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1306_reg_451 <= add_ln1306_fu_233_p2;
                bLast_reg_442 <= bLast_fu_223_p2;
                icmp_ln1315_reg_447 <= icmp_ln1315_fu_228_p2;
                icmp_ln1324_reg_475 <= icmp_ln1324_fu_268_p2;
                icmp_ln1324_reg_475_pp0_iter3_reg <= icmp_ln1324_reg_475;
                shl_ln1320_reg_509 <= grp_fu_306_p2;
                shl_ln1332_reg_514 <= grp_fu_315_p2;
                sub_ln1332_1_reg_489 <= sub_ln1332_1_fu_292_p2;
                sub_ln1332_reg_479 <= sub_ln1332_fu_274_p2;
                tmp_9_reg_484 <= sub_ln1332_fu_274_p2(4 downto 4);
                tmp_9_reg_484_pp0_iter3_reg <= tmp_9_reg_484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_conv3_i12_i_i933_pn_reg_161 <= ap_phi_reg_pp0_iter0_conv3_i12_i_i933_pn_reg_161;
                ap_phi_reg_pp0_iter1_val_1_reg_149 <= ap_phi_reg_pp0_iter0_val_1_reg_149;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filled_1_reg_468 <= filled_fu_76;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                val_1_reg_149 <= ap_phi_reg_pp0_iter2_val_1_reg_149;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter3_stage0, ap_idle_pp0_0to2, ap_idle_pp0_1to4, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1301_fu_198_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_88) + unsigned(ap_const_lv32_1));
    add_ln1306_fu_233_p2 <= std_logic_vector(unsigned(select_ln1294_reg_436) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage1_iter1, ap_block_state8_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage1_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage1_iter1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage1_iter1, ap_block_state8_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage1_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage1_iter1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage1_iter1, ap_block_state8_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage1_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage1_iter1)));
    end process;


    ap_block_state4_pp0_stage1_iter1_assign_proc : process(imgOutput_data_empty_n, ap_predicate_op41_read_state4)
    begin
                ap_block_state4_pp0_stage1_iter1 <= ((ap_predicate_op41_read_state4 = ap_const_boolean_1) and (imgOutput_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage1_iter3_assign_proc : process(ldata_full_n, ap_predicate_op76_write_state8)
    begin
                ap_block_state8_pp0_stage1_iter3 <= ((ap_predicate_op76_write_state8 = ap_const_boolean_1) and (ldata_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1301_fu_193_p2)
    begin
        if (((icmp_ln1301_fu_193_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1301_reg_427_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1301_reg_427_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln1301_reg_427_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln1301_reg_427_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_conv3_i12_i_i933_pn_reg_161 <= "XXXX";
    ap_phi_reg_pp0_iter0_val_1_reg_149 <= "XXXXXXXX";

    ap_predicate_op41_read_state4_assign_proc : process(icmp_ln1301_reg_427, icmp_ln1315_reg_447)
    begin
                ap_predicate_op41_read_state4 <= ((icmp_ln1315_reg_447 = ap_const_lv1_1) and (icmp_ln1301_reg_427 = ap_const_lv1_0));
    end process;


    ap_predicate_op76_write_state8_assign_proc : process(icmp_ln1301_reg_427_pp0_iter2_reg, icmp_ln1324_reg_475_pp0_iter3_reg)
    begin
                ap_predicate_op76_write_state8 <= ((icmp_ln1324_reg_475_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1301_reg_427_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln1301_reg_427, ap_block_pp0_stage1, add_ln1306_reg_451, j_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1301_reg_427 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_j_load <= add_ln1306_reg_451;
        else 
            ap_sig_allocacmp_j_load <= j_fu_84;
        end if; 
    end process;

    bLast_fu_223_p2 <= "1" when (sub = zext_ln1306_fu_220_p1) else "0";
    filled_next_fu_321_p2 <= std_logic_vector(unsigned(ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_161) + unsigned(filled_1_reg_468));
    filled_out <= filled_1_reg_468;

    filled_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1301_reg_427_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1301_reg_427_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filled_out_ap_vld <= ap_const_logic_1;
        else 
            filled_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_1_reg_468),8));

    grp_fu_315_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_315_ce <= ap_const_logic_1;
        else 
            grp_fu_315_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1332_1_reg_489),8));

    grp_fu_338_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_338_p1 <= sext_ln1332_fu_331_p1(8 - 1 downto 0);
    icmp_ln1301_fu_193_p2 <= "1" when (indvar_flatten_fu_88 = bound) else "0";
    icmp_ln1306_fu_207_p2 <= "1" when (ap_sig_allocacmp_j_load = empty) else "0";
    icmp_ln1315_fu_228_p2 <= "1" when (signed(zext_ln1306_fu_220_p1) < signed(cols_bound_per_npc_load)) else "0";
    icmp_ln1324_fu_268_p2 <= "1" when (signed(sub_ln1324_fu_262_p2) > signed(zext_ln1320_2_fu_258_p1)) else "0";

    imgOutput_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, imgOutput_data_empty_n, ap_predicate_op41_read_state4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op41_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imgOutput_data_blk_n <= imgOutput_data_empty_n;
        else 
            imgOutput_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgOutput_data_read_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op41_read_state4, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op41_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imgOutput_data_read <= ap_const_logic_1;
        else 
            imgOutput_data_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ldata_full_n, ap_predicate_op76_write_state8, ap_block_pp0_stage1)
    begin
        if (((ap_predicate_op76_write_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldata_blk_n <= ldata_full_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ldata_din <= (shl_ln1320_reg_509 or localbuffer_fu_80);

    ldata_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_predicate_op76_write_state8, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op76_write_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldata_write <= ap_const_logic_1;
        else 
            ldata_write <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_1_fu_347_p2 <= (shl_ln1320_reg_509 or localbuffer_fu_80);
    localbuffer_2_fu_358_p3 <= 
        shl_ln1332_reg_514 when (tmp_9_reg_484_pp0_iter3_reg(0) = '1') else 
        lshr_ln1332_reg_524;
    localbuffer_out <= localbuffer_fu_80;

    localbuffer_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1301_reg_427_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1301_reg_427_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            localbuffer_out_ap_vld <= ap_const_logic_1;
        else 
            localbuffer_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1294_fu_212_p3 <= 
        ap_const_lv16_0 when (icmp_ln1306_fu_207_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln1332_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1332_reg_479),32));

    sub_ln1324_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(zext_ln1313_fu_255_p1));
    sub_ln1332_1_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln1332_fu_280_p1));
    sub_ln1332_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(zext_ln1320_2_fu_258_p1));
    trunc_ln1332_fu_280_p1 <= sub_ln1332_fu_274_p2(3 - 1 downto 0);
    xf_bits_per_clock_fu_242_p3 <= 
        last_blk_width_load when (bLast_reg_442(0) = '1') else 
        ap_const_lv4_8;
    xor_ln1333_fu_298_p2 <= (xf_bits_per_clock_reg_456 xor ap_const_lv4_8);
    zext_ln1306_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1294_reg_436),32));
    zext_ln1313_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_456),5));
    zext_ln1320_2_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_fu_76),5));
end behav;
