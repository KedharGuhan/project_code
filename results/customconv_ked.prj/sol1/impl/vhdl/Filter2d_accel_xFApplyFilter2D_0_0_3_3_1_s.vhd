-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2d_accel_xFApplyFilter2D_0_0_3_3_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_kernel_pixel_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_0_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_0_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_1_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_1_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_1_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_2_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_2_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_pixel_2_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    p_kernel_filter_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_0_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_1_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_1_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_1_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_2_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_2_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    p_kernel_filter_2_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    shift : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Filter2d_accel_xFApplyFilter2D_0_0_3_3_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal shift_read_reg_393 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shift_read_reg_393_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_read_reg_393_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_read_reg_398_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_1_val_read_reg_403 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_1_val_read_reg_403_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_2_val_read_reg_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_2_val_read_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_2_val_read_reg_408_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_2_val_read_reg_408_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_read_reg_413 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_read_reg_413_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_read_reg_413_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_read_reg_413_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_read_reg_413_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_0_val_read_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_0_val_read_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_0_0_val_read_reg_423 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_0_0_val_read_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_pixel_2_2_val_read_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_2_2_val_read_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_2_val_read_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_2_val_read_reg_433_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_read_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_read_reg_438_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_read_reg_438_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_read_reg_438_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_read_reg_438_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_0_val_read_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_0_val_read_reg_443_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_0_val_read_reg_443_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_0_val_read_reg_443_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_1_val_read_reg_448 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_1_val_read_reg_448_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_0_val_read_reg_453_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_reg_518 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_3_reg_523 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal temp_7_reg_528 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_345_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_1_reg_558 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_353_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln607_reg_563 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_361_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln607_3_reg_578 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_2_fu_257_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_2_reg_583 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_369_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln607_4_reg_598 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln607_4_reg_598_pp0_iter8_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_377_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln607_2_reg_603 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_3_fu_278_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum_3_fu_278_p2 : signal is "no";
    signal sum_3_reg_618 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_385_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_4_reg_628 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_sum_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_649 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln607_fu_254_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln583_fu_251_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln607_2_fu_275_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln614_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln614_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln614_1_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln619_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_178_ce : STD_LOGIC;
    signal grp_fu_192_ce : STD_LOGIC;
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_292_ce : STD_LOGIC;
    signal select_ln614_fu_337_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_345_ce : STD_LOGIC;
    signal grp_fu_353_ce : STD_LOGIC;
    signal grp_fu_361_ce : STD_LOGIC;
    signal grp_fu_369_ce : STD_LOGIC;
    signal grp_fu_377_ce : STD_LOGIC;
    signal grp_fu_385_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal p_kernel_pixel_0_0_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_0_2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_0_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_1_2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_2_0_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_2_1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_pixel_2_2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_kernel_filter_0_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_0_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_0_2_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_1_2_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_kernel_filter_2_2_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_178_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_192_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_206_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_345_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_353_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_361_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_369_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_377_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_385_p10 : STD_LOGIC_VECTOR (23 downto 0);

    component Filter2d_accel_mul_16s_8ns_24_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Filter2d_accel_ashr_32s_8ns_32_7_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filter2d_accel_mac_muladd_16s_8ns_24s_25_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Filter2d_accel_mac_muladd_16s_8ns_25s_26_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component Filter2d_accel_mac_muladd_16s_8ns_26s_27_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component Filter2d_accel_mac_muladd_16s_8ns_27s_28_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    mul_16s_8ns_24_4_0_U80 : component Filter2d_accel_mul_16s_8ns_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_0_1_val_int_reg,
        din1 => grp_fu_178_p1,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    mul_16s_8ns_24_4_0_U81 : component Filter2d_accel_mul_16s_8ns_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_0_2_val_int_reg,
        din1 => grp_fu_192_p1,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p2);

    mul_16s_8ns_24_4_0_U82 : component Filter2d_accel_mul_16s_8ns_24_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_2_0_val_int_reg,
        din1 => grp_fu_206_p1,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    ashr_32s_8ns_32_7_0_U83 : component Filter2d_accel_ashr_32s_8ns_32_7_0
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => grp_fu_292_ce,
        dout => grp_fu_292_p2);

    mac_muladd_16s_8ns_24s_25_4_0_U84 : component Filter2d_accel_mac_muladd_16s_8ns_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_0_0_val_read_reg_423_pp0_iter1_reg,
        din1 => grp_fu_345_p1,
        din2 => temp_reg_518,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p3);

    mac_muladd_16s_8ns_24s_25_4_0_U85 : component Filter2d_accel_mac_muladd_16s_8ns_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_1_0_val_read_reg_418_pp0_iter1_reg,
        din1 => grp_fu_353_p1,
        din2 => temp_3_reg_523,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p3);

    mac_muladd_16s_8ns_24s_25_4_0_U86 : component Filter2d_accel_mac_muladd_16s_8ns_24s_25_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_2_1_val_read_reg_403_pp0_iter1_reg,
        din1 => grp_fu_361_p1,
        din2 => temp_7_reg_528,
        ce => grp_fu_361_ce,
        dout => grp_fu_361_p3);

    mac_muladd_16s_8ns_25s_26_4_0_U87 : component Filter2d_accel_mac_muladd_16s_8ns_25s_26_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 25,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_1_2_val_read_reg_408_pp0_iter3_reg,
        din1 => grp_fu_369_p1,
        din2 => add_ln607_3_reg_578,
        ce => grp_fu_369_ce,
        dout => grp_fu_369_p3);

    mac_muladd_16s_8ns_26s_27_4_0_U88 : component Filter2d_accel_mac_muladd_16s_8ns_26s_27_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_1_1_val_read_reg_413_pp0_iter4_reg,
        din1 => grp_fu_377_p1,
        din2 => sum_2_reg_583,
        ce => grp_fu_377_ce,
        dout => grp_fu_377_p3);

    mac_muladd_16s_8ns_27s_28_4_0_U89 : component Filter2d_accel_mac_muladd_16s_8ns_27s_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 27,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_kernel_filter_2_2_val_read_reg_398_pp0_iter7_reg,
        din1 => grp_fu_385_p1,
        din2 => sum_3_reg_618,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln607_2_reg_603 <= grp_fu_377_p3;
                add_ln607_3_reg_578 <= grp_fu_361_p3;
                add_ln607_4_reg_598 <= grp_fu_369_p3;
                add_ln607_4_reg_598_pp0_iter8_reg <= add_ln607_4_reg_598;
                add_ln607_reg_563 <= grp_fu_353_p3;
                p_kernel_filter_0_0_val_read_reg_423 <= p_kernel_filter_0_0_val_int_reg;
                p_kernel_filter_0_0_val_read_reg_423_pp0_iter1_reg <= p_kernel_filter_0_0_val_read_reg_423;
                p_kernel_filter_1_0_val_read_reg_418 <= p_kernel_filter_1_0_val_int_reg;
                p_kernel_filter_1_0_val_read_reg_418_pp0_iter1_reg <= p_kernel_filter_1_0_val_read_reg_418;
                p_kernel_filter_1_1_val_read_reg_413 <= p_kernel_filter_1_1_val_int_reg;
                p_kernel_filter_1_1_val_read_reg_413_pp0_iter1_reg <= p_kernel_filter_1_1_val_read_reg_413;
                p_kernel_filter_1_1_val_read_reg_413_pp0_iter2_reg <= p_kernel_filter_1_1_val_read_reg_413_pp0_iter1_reg;
                p_kernel_filter_1_1_val_read_reg_413_pp0_iter3_reg <= p_kernel_filter_1_1_val_read_reg_413_pp0_iter2_reg;
                p_kernel_filter_1_1_val_read_reg_413_pp0_iter4_reg <= p_kernel_filter_1_1_val_read_reg_413_pp0_iter3_reg;
                p_kernel_filter_1_2_val_read_reg_408 <= p_kernel_filter_1_2_val_int_reg;
                p_kernel_filter_1_2_val_read_reg_408_pp0_iter1_reg <= p_kernel_filter_1_2_val_read_reg_408;
                p_kernel_filter_1_2_val_read_reg_408_pp0_iter2_reg <= p_kernel_filter_1_2_val_read_reg_408_pp0_iter1_reg;
                p_kernel_filter_1_2_val_read_reg_408_pp0_iter3_reg <= p_kernel_filter_1_2_val_read_reg_408_pp0_iter2_reg;
                p_kernel_filter_2_1_val_read_reg_403 <= p_kernel_filter_2_1_val_int_reg;
                p_kernel_filter_2_1_val_read_reg_403_pp0_iter1_reg <= p_kernel_filter_2_1_val_read_reg_403;
                p_kernel_filter_2_2_val_read_reg_398 <= p_kernel_filter_2_2_val_int_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter1_reg <= p_kernel_filter_2_2_val_read_reg_398;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter2_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter1_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter3_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter2_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter4_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter3_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter5_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter4_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter6_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter5_reg;
                p_kernel_filter_2_2_val_read_reg_398_pp0_iter7_reg <= p_kernel_filter_2_2_val_read_reg_398_pp0_iter6_reg;
                p_kernel_pixel_0_0_val_read_reg_453 <= p_kernel_pixel_0_0_val_int_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter1_reg <= p_kernel_pixel_0_0_val_read_reg_453;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter2_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter1_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter3_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter2_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter4_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter3_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter5_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter4_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter6_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter5_reg;
                p_kernel_pixel_0_0_val_read_reg_453_pp0_iter7_reg <= p_kernel_pixel_0_0_val_read_reg_453_pp0_iter6_reg;
                p_kernel_pixel_0_1_val_read_reg_448 <= p_kernel_pixel_0_1_val_int_reg;
                p_kernel_pixel_0_1_val_read_reg_448_pp0_iter1_reg <= p_kernel_pixel_0_1_val_read_reg_448;
                p_kernel_pixel_1_0_val_read_reg_443 <= p_kernel_pixel_1_0_val_int_reg;
                p_kernel_pixel_1_0_val_read_reg_443_pp0_iter1_reg <= p_kernel_pixel_1_0_val_read_reg_443;
                p_kernel_pixel_1_0_val_read_reg_443_pp0_iter2_reg <= p_kernel_pixel_1_0_val_read_reg_443_pp0_iter1_reg;
                p_kernel_pixel_1_0_val_read_reg_443_pp0_iter3_reg <= p_kernel_pixel_1_0_val_read_reg_443_pp0_iter2_reg;
                p_kernel_pixel_1_1_val_read_reg_438 <= p_kernel_pixel_1_1_val_int_reg;
                p_kernel_pixel_1_1_val_read_reg_438_pp0_iter1_reg <= p_kernel_pixel_1_1_val_read_reg_438;
                p_kernel_pixel_1_1_val_read_reg_438_pp0_iter2_reg <= p_kernel_pixel_1_1_val_read_reg_438_pp0_iter1_reg;
                p_kernel_pixel_1_1_val_read_reg_438_pp0_iter3_reg <= p_kernel_pixel_1_1_val_read_reg_438_pp0_iter2_reg;
                p_kernel_pixel_1_1_val_read_reg_438_pp0_iter4_reg <= p_kernel_pixel_1_1_val_read_reg_438_pp0_iter3_reg;
                p_kernel_pixel_1_2_val_read_reg_433 <= p_kernel_pixel_1_2_val_int_reg;
                p_kernel_pixel_1_2_val_read_reg_433_pp0_iter1_reg <= p_kernel_pixel_1_2_val_read_reg_433;
                p_kernel_pixel_2_2_val_read_reg_428 <= p_kernel_pixel_2_2_val_int_reg;
                p_kernel_pixel_2_2_val_read_reg_428_pp0_iter1_reg <= p_kernel_pixel_2_2_val_read_reg_428;
                shift_read_reg_393 <= shift_int_reg;
                shift_read_reg_393_pp0_iter10_reg <= shift_read_reg_393_pp0_iter9_reg;
                shift_read_reg_393_pp0_iter11_reg <= shift_read_reg_393_pp0_iter10_reg;
                shift_read_reg_393_pp0_iter1_reg <= shift_read_reg_393;
                shift_read_reg_393_pp0_iter2_reg <= shift_read_reg_393_pp0_iter1_reg;
                shift_read_reg_393_pp0_iter3_reg <= shift_read_reg_393_pp0_iter2_reg;
                shift_read_reg_393_pp0_iter4_reg <= shift_read_reg_393_pp0_iter3_reg;
                shift_read_reg_393_pp0_iter5_reg <= shift_read_reg_393_pp0_iter4_reg;
                shift_read_reg_393_pp0_iter6_reg <= shift_read_reg_393_pp0_iter5_reg;
                shift_read_reg_393_pp0_iter7_reg <= shift_read_reg_393_pp0_iter6_reg;
                shift_read_reg_393_pp0_iter8_reg <= shift_read_reg_393_pp0_iter7_reg;
                shift_read_reg_393_pp0_iter9_reg <= shift_read_reg_393_pp0_iter8_reg;
                sum_1_reg_558 <= grp_fu_345_p3;
                sum_2_reg_583 <= sum_2_fu_257_p2;
                sum_3_reg_618 <= sum_3_fu_278_p2;
                sum_4_reg_628 <= grp_fu_385_p3;
                temp_3_reg_523 <= grp_fu_192_p2;
                temp_7_reg_528 <= grp_fu_206_p2;
                temp_reg_518 <= grp_fu_178_p2;
                tmp_reg_649 <= grp_fu_292_p2(27 downto 8);
                tmp_sum_reg_643 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln614_fu_337_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_kernel_filter_0_0_val_int_reg <= p_kernel_filter_0_0_val;
                p_kernel_filter_0_1_val_int_reg <= p_kernel_filter_0_1_val;
                p_kernel_filter_0_2_val_int_reg <= p_kernel_filter_0_2_val;
                p_kernel_filter_1_0_val_int_reg <= p_kernel_filter_1_0_val;
                p_kernel_filter_1_1_val_int_reg <= p_kernel_filter_1_1_val;
                p_kernel_filter_1_2_val_int_reg <= p_kernel_filter_1_2_val;
                p_kernel_filter_2_0_val_int_reg <= p_kernel_filter_2_0_val;
                p_kernel_filter_2_1_val_int_reg <= p_kernel_filter_2_1_val;
                p_kernel_filter_2_2_val_int_reg <= p_kernel_filter_2_2_val;
                p_kernel_pixel_0_0_val_int_reg <= p_kernel_pixel_0_0_val;
                p_kernel_pixel_0_1_val_int_reg <= p_kernel_pixel_0_1_val;
                p_kernel_pixel_0_2_val_int_reg <= p_kernel_pixel_0_2_val;
                p_kernel_pixel_1_0_val_int_reg <= p_kernel_pixel_1_0_val;
                p_kernel_pixel_1_1_val_int_reg <= p_kernel_pixel_1_1_val;
                p_kernel_pixel_1_2_val_int_reg <= p_kernel_pixel_1_2_val;
                p_kernel_pixel_2_0_val_int_reg <= p_kernel_pixel_2_0_val;
                p_kernel_pixel_2_1_val_int_reg <= p_kernel_pixel_2_1_val;
                p_kernel_pixel_2_2_val_int_reg <= p_kernel_pixel_2_2_val;
                shift_int_reg <= shift;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln614_fu_337_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln614_fu_337_p3;
        else 
            ap_return <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_178_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_178_p1 <= grp_fu_178_p10(8 - 1 downto 0);
    grp_fu_178_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_2_1_val_int_reg),24));

    grp_fu_192_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_192_ce <= ap_const_logic_1;
        else 
            grp_fu_192_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_192_p1 <= grp_fu_192_p10(8 - 1 downto 0);
    grp_fu_192_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_2_0_val_int_reg),24));

    grp_fu_206_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_206_ce <= ap_const_logic_1;
        else 
            grp_fu_206_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_206_p1 <= grp_fu_206_p10(8 - 1 downto 0);
    grp_fu_206_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_0_2_val_int_reg),24));

    grp_fu_292_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_292_ce <= ap_const_logic_1;
        else 
            grp_fu_292_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_292_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_4_reg_628),32));

    grp_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_read_reg_393_pp0_iter11_reg),32));

    grp_fu_345_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_345_ce <= ap_const_logic_1;
        else 
            grp_fu_345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p1 <= grp_fu_345_p10(8 - 1 downto 0);
    grp_fu_345_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_2_2_val_read_reg_428_pp0_iter1_reg),24));

    grp_fu_353_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_353_p1 <= grp_fu_353_p10(8 - 1 downto 0);
    grp_fu_353_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_1_2_val_read_reg_433_pp0_iter1_reg),24));

    grp_fu_361_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_361_ce <= ap_const_logic_1;
        else 
            grp_fu_361_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_361_p1 <= grp_fu_361_p10(8 - 1 downto 0);
    grp_fu_361_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_0_1_val_read_reg_448_pp0_iter1_reg),24));

    grp_fu_369_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_369_ce <= ap_const_logic_1;
        else 
            grp_fu_369_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_369_p1 <= grp_fu_369_p10(8 - 1 downto 0);
    grp_fu_369_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_1_0_val_read_reg_443_pp0_iter3_reg),24));

    grp_fu_377_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_377_ce <= ap_const_logic_1;
        else 
            grp_fu_377_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_377_p1 <= grp_fu_377_p10(8 - 1 downto 0);
    grp_fu_377_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_1_1_val_read_reg_438_pp0_iter4_reg),24));

    grp_fu_385_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_385_ce <= ap_const_logic_1;
        else 
            grp_fu_385_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_385_p1 <= grp_fu_385_p10(8 - 1 downto 0);
    grp_fu_385_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_pixel_0_0_val_read_reg_453_pp0_iter7_reg),24));
    icmp_ln614_fu_308_p2 <= "1" when (signed(tmp_reg_649) > signed(ap_const_lv20_0)) else "0";
    or_ln614_fu_331_p2 <= (tmp_8_fu_313_p3 or icmp_ln614_fu_308_p2);
    select_ln614_1_fu_323_p3 <= 
        ap_const_lv8_FF when (icmp_ln614_fu_308_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln614_fu_337_p3 <= 
        select_ln614_1_fu_323_p3 when (or_ln614_fu_331_p2(0) = '1') else 
        trunc_ln619_fu_320_p1;
        sext_ln583_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_1_reg_558),26));

        sext_ln607_2_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln607_4_reg_598_pp0_iter8_reg),27));

        sext_ln607_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln607_reg_563),26));

    sum_2_fu_257_p2 <= std_logic_vector(signed(sext_ln607_fu_254_p1) + signed(sext_ln583_fu_251_p1));
    sum_3_fu_278_p2 <= std_logic_vector(signed(sext_ln607_2_fu_275_p1) + signed(add_ln607_2_reg_603));
    tmp_8_fu_313_p3 <= tmp_sum_reg_643(27 downto 27);
    trunc_ln619_fu_320_p1 <= tmp_sum_reg_643(8 - 1 downto 0);
end behav;
