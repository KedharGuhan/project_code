-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2d_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    ldata_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_empty_n : IN STD_LOGIC;
    ldata_read : OUT STD_LOGIC;
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub3 : IN STD_LOGIC_VECTOR (4 downto 0);
    last_blk_width_cast3 : IN STD_LOGIC_VECTOR (3 downto 0);
    imgInput_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput_data_full_n : IN STD_LOGIC;
    imgInput_data_write : OUT STD_LOGIC );
end;


architecture behav of Filter2d_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1054_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1054_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_661_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput_data_blk_n : STD_LOGIC;
    signal icmp_ln1084_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_684_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op79_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_blk_width_cast3_cast_fu_164_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal last_blk_width_cast3_cast_reg_656 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1054_reg_661_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_661_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1054_fu_203_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1054_reg_665 : STD_LOGIC_VECTOR (30 downto 0);
    signal bLast_width_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_670_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_670_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_670_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_670_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1082_fu_214_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1082_reg_679 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1084_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_684_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1086_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1086_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_230_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xf_bits_per_clock_reg_693 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_236_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ptr_width_minus_reg_699 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln1082_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1082_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1082_reg_704_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1082_reg_704_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1082_reg_704_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_1_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1065_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_717_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_717_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1074_fu_284_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1074_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal rem_3_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_3_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1067_fu_295_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1067_reg_731 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1067_fu_299_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1067_reg_739 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1071_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1071_reg_744 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1071_fu_311_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1071_reg_749 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1071_fu_315_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1071_reg_755 : STD_LOGIC_VECTOR (2 downto 0);
    signal rem_2_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_load_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1074_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_1_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_1_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1074_fu_350_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_reg_782 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_1_fu_354_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_1_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1066_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_796_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal val_2_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1071_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1074_2_fu_407_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1074_2_reg_832 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1074_3_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1074_3_reg_837 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1071_2_fu_434_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1071_2_reg_852 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1071_1_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1071_1_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_1_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_1_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1074_2_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1074_2_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1074_3_fu_495_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1074_3_reg_872 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln1074_1_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1074_1_reg_877 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1074_1_reg_877_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_1_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_1_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1071_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1074_reg_904 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_4_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_4_reg_909 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_5_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal j_fu_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_4_fu_251_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1054_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1082_fu_242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1060_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1060_1_fu_272_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1061_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1074_fu_330_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1074_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1071_fu_379_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1071_fu_384_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1071_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1071_1_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1071_fu_424_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1071_1_fu_429_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1071_2_fu_440_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1071_2_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1071_3_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1074_fu_479_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1074_1_fu_484_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1074_1_fu_501_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1074_2_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_3_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1071_3_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1071_3_fu_552_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_2_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_3_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1059_fu_584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_370_ce : STD_LOGIC;
    signal grp_fu_520_ce : STD_LOGIC;
    signal grp_fu_532_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_302 : BOOLEAN;
    signal ap_condition_721 : BOOLEAN;
    signal ap_condition_724 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2d_accel_lshr_8ns_3ns_8_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter2d_accel_shl_8ns_3ns_8_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Filter2d_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    lshr_8ns_3ns_8_2_1_U25 : component Filter2d_accel_lshr_8ns_3ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val_fu_96,
        din1 => grp_fu_370_p1,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);

    shl_8ns_3ns_8_2_1_U26 : component Filter2d_accel_shl_8ns_3ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln1071_reg_847,
        din1 => grp_fu_520_p1,
        ce => grp_fu_520_ce,
        dout => grp_fu_520_p2);

    lshr_8ns_3ns_8_2_1_U27 : component Filter2d_accel_lshr_8ns_3ns_8_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1074_2_reg_867,
        din1 => grp_fu_532_p1,
        ce => grp_fu_532_ce,
        dout => grp_fu_532_p2);

    flow_control_loop_pipe_sequential_init_U : component Filter2d_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_302)) then
                if (((icmp_ln1065_reg_717_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1054_reg_661_pp0_iter3_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_5_fu_580_p2;
                elsif (((icmp_ln1065_reg_717_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln1054_reg_661_pp0_iter3_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_4_reg_909;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
                end if;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv31_0;
                elsif (((icmp_ln1054_reg_661 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_88 <= add_ln1054_reg_665;
                end if;
            end if; 
        end if;
    end process;

    j_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_92 <= ap_const_lv32_0;
                elsif (((icmp_ln1054_reg_661 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_92 <= j_4_fu_251_p3;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rem_fu_84 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_724)) then 
                    rem_fu_84 <= rem_2_reg_760;
                elsif ((ap_const_boolean_1 = ap_condition_721)) then 
                    rem_fu_84 <= rem_3_reg_726;
                end if;
            end if; 
        end if;
    end process;

    val_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                val_fu_96 <= ap_const_lv8_0;
            elsif (((icmp_ln1065_reg_717 = ap_const_lv1_1) and (icmp_ln1054_reg_661_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                val_fu_96 <= val_2_reg_806;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln1054_reg_665 <= add_ln1054_fu_203_p2;
                add_ln1071_reg_744 <= add_ln1071_fu_305_p2;
                add_ln1074_reg_721 <= add_ln1074_fu_284_p2;
                add_ln1086_reg_688 <= add_ln1086_fu_224_p2;
                and_ln1071_reg_847 <= and_ln1071_fu_415_p2;
                bLast_width_reg_670 <= bLast_width_fu_209_p2;
                bLast_width_reg_670_pp0_iter1_reg <= bLast_width_reg_670;
                bLast_width_reg_670_pp0_iter2_reg <= bLast_width_reg_670_pp0_iter1_reg;
                bLast_width_reg_670_pp0_iter3_reg <= bLast_width_reg_670_pp0_iter2_reg;
                bLast_width_reg_670_pp0_iter4_reg <= bLast_width_reg_670_pp0_iter3_reg;
                icmp_ln1054_reg_661 <= icmp_ln1054_fu_198_p2;
                icmp_ln1054_reg_661_pp0_iter1_reg <= icmp_ln1054_reg_661;
                icmp_ln1054_reg_661_pp0_iter2_reg <= icmp_ln1054_reg_661_pp0_iter1_reg;
                icmp_ln1054_reg_661_pp0_iter3_reg <= icmp_ln1054_reg_661_pp0_iter2_reg;
                icmp_ln1065_reg_717 <= icmp_ln1065_fu_278_p2;
                icmp_ln1065_reg_717_pp0_iter2_reg <= icmp_ln1065_reg_717;
                icmp_ln1065_reg_717_pp0_iter3_reg <= icmp_ln1065_reg_717_pp0_iter2_reg;
                icmp_ln1074_reg_825 <= icmp_ln1074_fu_403_p2;
                icmp_ln1084_reg_684 <= icmp_ln1084_fu_219_p2;
                icmp_ln1084_reg_684_pp0_iter1_reg <= icmp_ln1084_reg_684;
                icmp_ln1084_reg_684_pp0_iter2_reg <= icmp_ln1084_reg_684_pp0_iter1_reg;
                icmp_ln1084_reg_684_pp0_iter3_reg <= icmp_ln1084_reg_684_pp0_iter2_reg;
                icmp_ln1084_reg_684_pp0_iter4_reg <= icmp_ln1084_reg_684_pp0_iter3_reg;
                localbuffer_reg_842 <= grp_fu_370_p2;
                localbuffer_reg_842_pp0_iter3_reg <= localbuffer_reg_842;
                lshr_ln1071_1_reg_862 <= lshr_ln1071_1_fu_460_p2;
                rem_1_reg_709 <= rem_fu_84;
                rem_2_reg_760 <= rem_2_fu_321_p2;
                rem_3_reg_726 <= rem_3_fu_289_p2;
                select_ln1071_2_reg_852 <= select_ln1071_2_fu_434_p3;
                shl_ln1071_1_reg_857 <= shl_ln1071_1_fu_454_p2;
                shl_ln1071_reg_898 <= grp_fu_520_p2;
                sub_ln1067_reg_739 <= sub_ln1067_fu_299_p2;
                sub_ln1071_reg_755 <= sub_ln1071_fu_315_p2;
                sub_ln1074_2_reg_832 <= sub_ln1074_2_fu_407_p2;
                sub_ln1074_3_reg_837 <= sub_ln1074_3_fu_411_p2;
                sub_ln1082_reg_679 <= sub_ln1082_fu_214_p2;
                trunc_ln1067_reg_731 <= trunc_ln1067_fu_295_p1;
                trunc_ln1071_reg_749 <= trunc_ln1071_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln1071_1_reg_887 <= and_ln1071_1_fu_525_p2;
                icmp_ln1066_reg_796 <= icmp_ln1066_fu_362_p2;
                icmp_ln1066_reg_796_pp0_iter3_reg <= icmp_ln1066_reg_796;
                icmp_ln1071_reg_817 <= icmp_ln1071_fu_394_p2;
                icmp_ln1071_reg_817_pp0_iter3_reg <= icmp_ln1071_reg_817;
                    last_blk_width_cast3_cast_reg_656(3 downto 0) <= last_blk_width_cast3_cast_fu_164_p1(3 downto 0);
                localbuffer_4_reg_909 <= localbuffer_4_fu_574_p2;
                lshr_ln1071_reg_812 <= lshr_ln1071_fu_388_p2;
                lshr_ln1074_1_reg_877 <= lshr_ln1074_1_fu_511_p2;
                lshr_ln1074_1_reg_877_pp0_iter4_reg <= lshr_ln1074_1_reg_877;
                lshr_ln1074_reg_904 <= grp_fu_532_p2;
                lshr_ln1082_reg_704 <= lshr_ln1082_fu_245_p2;
                lshr_ln1082_reg_704_pp0_iter2_reg <= lshr_ln1082_reg_704;
                lshr_ln1082_reg_704_pp0_iter3_reg <= lshr_ln1082_reg_704_pp0_iter2_reg;
                lshr_ln1082_reg_704_pp0_iter4_reg <= lshr_ln1082_reg_704_pp0_iter3_reg;
                ptr_width_minus_reg_699 <= ptr_width_minus_fu_236_p3;
                select_ln1074_2_reg_867 <= select_ln1074_2_fu_489_p3;
                select_ln1074_3_reg_872 <= select_ln1074_3_fu_495_p3;
                sub_ln1074_1_reg_777 <= sub_ln1074_1_fu_345_p2;
                sub_ln1074_reg_772 <= sub_ln1074_fu_340_p2;
                trunc_ln1074_1_reg_790 <= trunc_ln1074_1_fu_354_p1;
                trunc_ln1074_reg_782 <= trunc_ln1074_fu_350_p1;
                val_2_reg_806 <= ldata_dout;
                val_load_reg_765 <= val_fu_96;
                xf_bits_per_clock_reg_693 <= xf_bits_per_clock_fu_230_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    last_blk_width_cast3_cast_reg_656(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter4_stage0, ap_idle_pp0_0to3, ap_idle_pp0_1to5, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1054_fu_203_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv31_1));
    add_ln1071_fu_305_p2 <= std_logic_vector(unsigned(zext_ln1060_1_fu_272_p1) + unsigned(ap_const_lv5_1F));
    add_ln1074_fu_284_p2 <= std_logic_vector(unsigned(last_blk_width_cast3_cast_reg_656) + unsigned(ap_const_lv5_7));
    add_ln1086_fu_224_p2 <= std_logic_vector(unsigned(j_fu_92) + unsigned(ap_const_lv32_1));
    and_ln1071_1_fu_525_p2 <= (shl_ln1071_1_reg_857 and lshr_ln1071_1_reg_862);
    and_ln1071_2_fu_563_p2 <= (xor_ln1071_3_fu_558_p2 and localbuffer_3_fu_537_p3);
    and_ln1071_3_fu_569_p2 <= (select_ln1071_3_fu_552_p3 and and_ln1071_1_reg_887);
    and_ln1071_fu_415_p2 <= (val_2_reg_806 and lshr_ln1071_reg_812);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_block_state5_pp0_stage0_iter2, ap_block_state11_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_block_state5_pp0_stage0_iter2, ap_block_state11_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_block_state5_pp0_stage0_iter2, ap_block_state11_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter5_assign_proc : process(imgInput_data_full_n, icmp_ln1084_reg_684_pp0_iter4_reg)
    begin
                ap_block_state11_pp0_stage0_iter5 <= ((imgInput_data_full_n = ap_const_logic_0) and (icmp_ln1084_reg_684_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(ldata_empty_n, ap_predicate_op79_read_state5)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((ldata_empty_n = ap_const_logic_0) and (ap_predicate_op79_read_state5 = ap_const_boolean_1));
    end process;


    ap_condition_302_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_302 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_721_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_661_pp0_iter1_reg, icmp_ln1065_reg_717)
    begin
                ap_condition_721 <= ((icmp_ln1065_reg_717 = ap_const_lv1_0) and (icmp_ln1054_reg_661_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_724_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_661_pp0_iter1_reg, icmp_ln1065_reg_717)
    begin
                ap_condition_724 <= ((icmp_ln1065_reg_717 = ap_const_lv1_1) and (icmp_ln1054_reg_661_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1054_fu_198_p2)
    begin
        if (((icmp_ln1054_fu_198_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1054_reg_661)
    begin
        if (((icmp_ln1054_reg_661 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln1054_reg_661_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1054_reg_661_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 <= "XXXXXXXX";

    ap_predicate_op79_read_state5_assign_proc : process(icmp_ln1054_reg_661_pp0_iter1_reg, icmp_ln1065_reg_717)
    begin
                ap_predicate_op79_read_state5 <= ((icmp_ln1065_reg_717 = ap_const_lv1_1) and (icmp_ln1054_reg_661_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_width_fu_209_p2 <= "1" when (j_fu_92 = sub) else "0";

    grp_fu_370_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_370_ce <= ap_const_logic_1;
        else 
            grp_fu_370_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_reg_739),8));

    grp_fu_520_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_520_ce <= ap_const_logic_1;
        else 
            grp_fu_520_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_2_reg_852),8));

    grp_fu_532_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_532_ce <= ap_const_logic_1;
        else 
            grp_fu_532_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_3_reg_872),8));
    icmp_ln1054_fu_198_p2 <= "1" when (signed(zext_ln1054_fu_194_p1) < signed(bound)) else "0";
    icmp_ln1065_fu_278_p2 <= "1" when (signed(rem_fu_84) < signed(zext_ln1060_fu_269_p1)) else "0";
    icmp_ln1066_fu_362_p2 <= "1" when (rem_1_reg_709 = ap_const_lv32_0) else "0";
    icmp_ln1071_fu_394_p2 <= "1" when (unsigned(rem_1_reg_709) > unsigned(sext_ln1071_fu_376_p1)) else "0";
    icmp_ln1074_fu_403_p2 <= "1" when (unsigned(sub_ln1074_1_reg_777) > unsigned(sub_ln1074_reg_772)) else "0";
    icmp_ln1084_fu_219_p2 <= "1" when (signed(j_fu_92) < signed(cols_bound_per_npc_load)) else "0";

    imgInput_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, imgInput_data_full_n, ap_block_pp0_stage0, icmp_ln1084_reg_684_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_reg_684_pp0_iter4_reg = ap_const_lv1_1))) then 
            imgInput_data_blk_n <= imgInput_data_full_n;
        else 
            imgInput_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput_data_din <= (select_ln1059_fu_584_p3 and ap_phi_reg_pp0_iter5_localbuffer_1_reg_155);

    imgInput_data_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, icmp_ln1084_reg_684_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_reg_684_pp0_iter4_reg = ap_const_lv1_1))) then 
            imgInput_data_write <= ap_const_logic_1;
        else 
            imgInput_data_write <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_251_p3 <= 
        ap_const_lv32_0 when (bLast_width_reg_670(0) = '1') else 
        add_ln1086_reg_688;
    last_blk_width_cast3_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_cast3),5));

    ldata_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ldata_empty_n, ap_block_pp0_stage0, icmp_ln1054_reg_661_pp0_iter1_reg, icmp_ln1065_reg_717)
    begin
        if (((icmp_ln1065_reg_717 = ap_const_lv1_1) and (icmp_ln1054_reg_661_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata_blk_n <= ldata_empty_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_predicate_op79_read_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op79_read_state5 = ap_const_boolean_1))) then 
            ldata_read <= ap_const_logic_1;
        else 
            ldata_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_3_fu_537_p3 <= 
        ap_const_lv8_0 when (icmp_ln1066_reg_796_pp0_iter3_reg(0) = '1') else 
        localbuffer_reg_842_pp0_iter3_reg;
    localbuffer_4_fu_574_p2 <= (and_ln1071_3_fu_569_p2 or and_ln1071_2_fu_563_p2);
    localbuffer_5_fu_580_p2 <= (lshr_ln1074_reg_904 and lshr_ln1074_1_reg_877_pp0_iter4_reg);
    lshr_ln1071_1_fu_460_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_3_fu_450_p1(8-1 downto 0)))));
    lshr_ln1071_fu_388_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_fu_384_p1(8-1 downto 0)))));
    lshr_ln1074_1_fu_511_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1074_2_fu_507_p1(8-1 downto 0)))));
    lshr_ln1082_fu_245_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1082_fu_242_p1(8-1 downto 0)))));
    ptr_width_minus_fu_236_p3 <= 
        sub3 when (bLast_width_reg_670(0) = '1') else 
        ap_const_lv5_0;
    rem_2_fu_321_p2 <= std_logic_vector(unsigned(rem_fu_84) + unsigned(sext_ln1061_fu_275_p1));
    rem_3_fu_289_p2 <= std_logic_vector(unsigned(rem_fu_84) - unsigned(zext_ln1060_fu_269_p1));
    select_ln1059_fu_584_p3 <= 
        lshr_ln1082_reg_704_pp0_iter4_reg when (bLast_width_reg_670_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1071_1_fu_429_p3 <= 
        trunc_ln1071_reg_749 when (icmp_ln1071_reg_817(0) = '1') else 
        trunc_ln1067_reg_731;
    select_ln1071_2_fu_434_p3 <= 
        xor_ln1071_1_fu_419_p2 when (icmp_ln1071_reg_817(0) = '1') else 
        trunc_ln1067_reg_731;
    select_ln1071_3_fu_552_p3 <= 
        tmp_10_fu_543_p4 when (icmp_ln1071_reg_817_pp0_iter3_reg(0) = '1') else 
        shl_ln1071_reg_898;
    select_ln1071_fu_424_p3 <= 
        trunc_ln1067_reg_731 when (icmp_ln1071_reg_817(0) = '1') else 
        trunc_ln1071_reg_749;
    select_ln1074_1_fu_484_p3 <= 
        sub_ln1074_2_reg_832 when (icmp_ln1074_reg_825(0) = '1') else 
        sub_ln1074_3_reg_837;
    select_ln1074_2_fu_489_p3 <= 
        tmp_11_fu_470_p4 when (icmp_ln1074_reg_825(0) = '1') else 
        val_load_reg_765;
    select_ln1074_3_fu_495_p3 <= 
        xor_ln1074_fu_479_p2 when (icmp_ln1074_reg_825(0) = '1') else 
        trunc_ln1074_reg_782;
    select_ln1074_fu_330_p3 <= 
        add_ln1074_reg_721 when (bLast_width_reg_670_pp0_iter1_reg(0) = '1') else 
        ap_const_lv5_F;
        sext_ln1061_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_width_minus_reg_699),32));

        sext_ln1071_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1071_reg_744),32));

    shl_ln1071_1_fu_454_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_2_fu_446_p1(8-1 downto 0)))));
    sub_ln1067_fu_299_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln1067_fu_295_p1));
    sub_ln1071_fu_315_p2 <= std_logic_vector(unsigned(trunc_ln1071_fu_311_p1) - unsigned(trunc_ln1067_fu_295_p1));
    sub_ln1074_1_fu_345_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(rem_1_reg_709));
    sub_ln1074_2_fu_407_p2 <= std_logic_vector(unsigned(trunc_ln1074_reg_782) - unsigned(trunc_ln1074_1_reg_790));
    sub_ln1074_3_fu_411_p2 <= std_logic_vector(unsigned(trunc_ln1074_1_reg_790) - unsigned(trunc_ln1074_reg_782));
    sub_ln1074_fu_340_p2 <= std_logic_vector(unsigned(zext_ln1074_fu_336_p1) - unsigned(rem_1_reg_709));
    sub_ln1082_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(empty));
    
    tmp_10_fu_543_p4_proc : process(shl_ln1071_reg_898)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_10_fu_543_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln1071_reg_898;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_10_fu_543_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_10_fu_543_p4_i) := shl_ln1071_reg_898(8-1-tmp_10_fu_543_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_543_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_11_fu_470_p4_proc : process(val_load_reg_765)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_11_fu_470_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := val_load_reg_765;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_11_fu_470_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_11_fu_470_p4_i) := val_load_reg_765(8-1-tmp_11_fu_470_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_470_p4 <= resvalue(8-1 downto 0);
    end process;

    trunc_ln1067_fu_295_p1 <= rem_fu_84(3 - 1 downto 0);
    trunc_ln1071_fu_311_p1 <= add_ln1071_fu_305_p2(3 - 1 downto 0);
    trunc_ln1074_1_fu_354_p1 <= sub_ln1074_fu_340_p2(3 - 1 downto 0);
    trunc_ln1074_fu_350_p1 <= sub_ln1074_1_fu_345_p2(3 - 1 downto 0);
    xf_bits_per_clock_fu_230_p3 <= 
        last_blk_width_load when (bLast_width_reg_670(0) = '1') else 
        ap_const_lv4_8;
    xor_ln1071_1_fu_419_p2 <= (trunc_ln1067_reg_731 xor ap_const_lv3_7);
    xor_ln1071_2_fu_440_p2 <= (select_ln1071_fu_424_p3 xor ap_const_lv3_7);
    xor_ln1071_3_fu_558_p2 <= (ap_const_lv8_FF xor and_ln1071_1_reg_887);
    xor_ln1071_fu_379_p2 <= (sub_ln1071_reg_755 xor ap_const_lv3_7);
    xor_ln1074_1_fu_501_p2 <= (select_ln1074_1_fu_484_p3 xor ap_const_lv3_7);
    xor_ln1074_fu_479_p2 <= (trunc_ln1074_reg_782 xor ap_const_lv3_7);
    zext_ln1054_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_88),32));
    zext_ln1060_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_693),5));
    zext_ln1060_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_693),32));
    zext_ln1071_2_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_1_fu_429_p3),8));
    zext_ln1071_3_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1071_2_fu_440_p2),8));
    zext_ln1071_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1071_fu_379_p2),8));
    zext_ln1074_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1074_1_fu_501_p2),8));
    zext_ln1074_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_fu_330_p3),32));
    zext_ln1082_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1082_reg_679),8));
end behav;
