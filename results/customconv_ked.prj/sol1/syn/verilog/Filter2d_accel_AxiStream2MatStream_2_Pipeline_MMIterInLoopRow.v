// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Filter2d_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        empty,
        cols_bound_per_npc_load,
        ldata_dout,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_empty_n,
        ldata_read,
        sub,
        last_blk_width_load,
        sub3,
        last_blk_width_cast3,
        imgInput_data_din,
        imgInput_data_num_data_valid,
        imgInput_data_fifo_cap,
        imgInput_data_full_n,
        imgInput_data_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bound;
input  [2:0] empty;
input  [31:0] cols_bound_per_npc_load;
input  [7:0] ldata_dout;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_empty_n;
output   ldata_read;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [4:0] sub3;
input  [3:0] last_blk_width_cast3;
output  [7:0] imgInput_data_din;
input  [2:0] imgInput_data_num_data_valid;
input  [2:0] imgInput_data_fifo_cap;
input   imgInput_data_full_n;
output   imgInput_data_write;

reg ap_idle;
reg ldata_read;
reg imgInput_data_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln1054_fu_198_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1054_reg_661;
reg   [0:0] icmp_ln1054_reg_661_pp0_iter1_reg;
reg   [0:0] icmp_ln1065_reg_717;
reg    imgInput_data_blk_n;
reg   [0:0] icmp_ln1084_reg_684;
reg   [0:0] icmp_ln1084_reg_684_pp0_iter4_reg;
reg    ap_predicate_op79_read_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] last_blk_width_cast3_cast_fu_164_p1;
reg   [4:0] last_blk_width_cast3_cast_reg_656;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln1054_reg_661_pp0_iter2_reg;
reg   [0:0] icmp_ln1054_reg_661_pp0_iter3_reg;
wire   [30:0] add_ln1054_fu_203_p2;
reg   [30:0] add_ln1054_reg_665;
wire   [0:0] bLast_width_fu_209_p2;
reg   [0:0] bLast_width_reg_670;
reg   [0:0] bLast_width_reg_670_pp0_iter1_reg;
reg   [0:0] bLast_width_reg_670_pp0_iter2_reg;
reg   [0:0] bLast_width_reg_670_pp0_iter3_reg;
reg   [0:0] bLast_width_reg_670_pp0_iter4_reg;
wire   [2:0] sub_ln1082_fu_214_p2;
reg   [2:0] sub_ln1082_reg_679;
wire   [0:0] icmp_ln1084_fu_219_p2;
reg   [0:0] icmp_ln1084_reg_684_pp0_iter1_reg;
reg   [0:0] icmp_ln1084_reg_684_pp0_iter2_reg;
reg   [0:0] icmp_ln1084_reg_684_pp0_iter3_reg;
wire   [31:0] add_ln1086_fu_224_p2;
reg   [31:0] add_ln1086_reg_688;
wire   [3:0] xf_bits_per_clock_fu_230_p3;
reg   [3:0] xf_bits_per_clock_reg_693;
wire   [4:0] ptr_width_minus_fu_236_p3;
reg   [4:0] ptr_width_minus_reg_699;
wire   [7:0] lshr_ln1082_fu_245_p2;
reg   [7:0] lshr_ln1082_reg_704;
reg   [7:0] lshr_ln1082_reg_704_pp0_iter2_reg;
reg   [7:0] lshr_ln1082_reg_704_pp0_iter3_reg;
reg   [7:0] lshr_ln1082_reg_704_pp0_iter4_reg;
reg   [31:0] rem_1_reg_709;
wire   [0:0] icmp_ln1065_fu_278_p2;
reg   [0:0] icmp_ln1065_reg_717_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_reg_717_pp0_iter3_reg;
wire   [4:0] add_ln1074_fu_284_p2;
reg   [4:0] add_ln1074_reg_721;
wire   [31:0] rem_3_fu_289_p2;
reg   [31:0] rem_3_reg_726;
wire   [2:0] trunc_ln1067_fu_295_p1;
reg   [2:0] trunc_ln1067_reg_731;
wire   [2:0] sub_ln1067_fu_299_p2;
reg   [2:0] sub_ln1067_reg_739;
wire  signed [4:0] add_ln1071_fu_305_p2;
reg  signed [4:0] add_ln1071_reg_744;
wire   [2:0] trunc_ln1071_fu_311_p1;
reg   [2:0] trunc_ln1071_reg_749;
wire   [2:0] sub_ln1071_fu_315_p2;
reg   [2:0] sub_ln1071_reg_755;
wire   [31:0] rem_2_fu_321_p2;
reg   [31:0] rem_2_reg_760;
reg   [7:0] val_load_reg_765;
wire   [31:0] sub_ln1074_fu_340_p2;
reg   [31:0] sub_ln1074_reg_772;
wire   [31:0] sub_ln1074_1_fu_345_p2;
reg   [31:0] sub_ln1074_1_reg_777;
wire   [2:0] trunc_ln1074_fu_350_p1;
reg   [2:0] trunc_ln1074_reg_782;
wire   [2:0] trunc_ln1074_1_fu_354_p1;
reg   [2:0] trunc_ln1074_1_reg_790;
wire   [0:0] icmp_ln1066_fu_362_p2;
reg   [0:0] icmp_ln1066_reg_796;
reg   [0:0] icmp_ln1066_reg_796_pp0_iter3_reg;
reg   [7:0] val_2_reg_806;
wire   [7:0] lshr_ln1071_fu_388_p2;
reg   [7:0] lshr_ln1071_reg_812;
wire   [0:0] icmp_ln1071_fu_394_p2;
reg   [0:0] icmp_ln1071_reg_817;
reg   [0:0] icmp_ln1071_reg_817_pp0_iter3_reg;
wire   [0:0] icmp_ln1074_fu_403_p2;
reg   [0:0] icmp_ln1074_reg_825;
wire   [2:0] sub_ln1074_2_fu_407_p2;
reg   [2:0] sub_ln1074_2_reg_832;
wire   [2:0] sub_ln1074_3_fu_411_p2;
reg   [2:0] sub_ln1074_3_reg_837;
wire   [7:0] grp_fu_370_p2;
reg   [7:0] localbuffer_reg_842;
reg   [7:0] localbuffer_reg_842_pp0_iter3_reg;
wire   [7:0] and_ln1071_fu_415_p2;
reg   [7:0] and_ln1071_reg_847;
wire   [2:0] select_ln1071_2_fu_434_p3;
reg   [2:0] select_ln1071_2_reg_852;
wire   [7:0] shl_ln1071_1_fu_454_p2;
reg   [7:0] shl_ln1071_1_reg_857;
wire   [7:0] lshr_ln1071_1_fu_460_p2;
reg   [7:0] lshr_ln1071_1_reg_862;
wire   [7:0] select_ln1074_2_fu_489_p3;
reg   [7:0] select_ln1074_2_reg_867;
wire   [2:0] select_ln1074_3_fu_495_p3;
reg   [2:0] select_ln1074_3_reg_872;
wire   [7:0] lshr_ln1074_1_fu_511_p2;
reg   [7:0] lshr_ln1074_1_reg_877;
reg   [7:0] lshr_ln1074_1_reg_877_pp0_iter4_reg;
wire   [7:0] and_ln1071_1_fu_525_p2;
reg   [7:0] and_ln1071_1_reg_887;
wire   [7:0] grp_fu_520_p2;
reg   [7:0] shl_ln1071_reg_898;
wire   [7:0] grp_fu_532_p2;
reg   [7:0] lshr_ln1074_reg_904;
wire   [7:0] localbuffer_4_fu_574_p2;
reg   [7:0] localbuffer_4_reg_909;
wire   [7:0] localbuffer_5_fu_580_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter5_localbuffer_1_reg_155;
reg   [31:0] rem_fu_84;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [30:0] i_fu_88;
reg   [31:0] j_fu_92;
wire   [31:0] j_4_fu_251_p3;
reg   [7:0] val_fu_96;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln1054_fu_194_p1;
wire   [7:0] zext_ln1082_fu_242_p1;
wire   [31:0] zext_ln1060_fu_269_p1;
wire   [4:0] zext_ln1060_1_fu_272_p1;
wire  signed [31:0] sext_ln1061_fu_275_p1;
wire   [4:0] select_ln1074_fu_330_p3;
wire   [31:0] zext_ln1074_fu_336_p1;
wire   [7:0] grp_fu_370_p1;
wire   [2:0] xor_ln1071_fu_379_p2;
wire   [7:0] zext_ln1071_fu_384_p1;
wire  signed [31:0] sext_ln1071_fu_376_p1;
wire   [2:0] xor_ln1071_1_fu_419_p2;
wire   [2:0] select_ln1071_fu_424_p3;
wire   [2:0] select_ln1071_1_fu_429_p3;
wire   [2:0] xor_ln1071_2_fu_440_p2;
wire   [7:0] zext_ln1071_2_fu_446_p1;
wire   [7:0] zext_ln1071_3_fu_450_p1;
reg   [7:0] tmp_11_fu_470_p4;
wire   [2:0] xor_ln1074_fu_479_p2;
wire   [2:0] select_ln1074_1_fu_484_p3;
wire   [2:0] xor_ln1074_1_fu_501_p2;
wire   [7:0] zext_ln1074_2_fu_507_p1;
wire   [7:0] grp_fu_520_p1;
wire   [7:0] grp_fu_532_p1;
reg   [7:0] tmp_10_fu_543_p4;
wire   [7:0] localbuffer_3_fu_537_p3;
wire   [7:0] xor_ln1071_3_fu_558_p2;
wire   [7:0] select_ln1071_3_fu_552_p3;
wire   [7:0] and_ln1071_2_fu_563_p2;
wire   [7:0] and_ln1071_3_fu_569_p2;
wire   [7:0] select_ln1059_fu_584_p3;
reg    grp_fu_370_ce;
reg    grp_fu_520_ce;
reg    grp_fu_532_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_302;
reg    ap_condition_721;
reg    ap_condition_724;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 rem_fu_84 = 32'd0;
#0 i_fu_88 = 31'd0;
#0 j_fu_92 = 32'd0;
#0 val_fu_96 = 8'd0;
#0 ap_done_reg = 1'b0;
end

Filter2d_accel_lshr_8ns_3ns_8_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
lshr_8ns_3ns_8_2_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_fu_96),
    .din1(grp_fu_370_p1),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

Filter2d_accel_shl_8ns_3ns_8_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
shl_8ns_3ns_8_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln1071_reg_847),
    .din1(grp_fu_520_p1),
    .ce(grp_fu_520_ce),
    .dout(grp_fu_520_p2)
);

Filter2d_accel_lshr_8ns_3ns_8_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
lshr_8ns_3ns_8_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1074_2_reg_867),
    .din1(grp_fu_532_p1),
    .ce(grp_fu_532_ce),
    .dout(grp_fu_532_p2)
);

Filter2d_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_302)) begin
        if (((icmp_ln1065_reg_717_pp0_iter3_reg == 1'd0) & (icmp_ln1054_reg_661_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_5_fu_580_p2;
        end else if (((icmp_ln1065_reg_717_pp0_iter3_reg == 1'd1) & (icmp_ln1054_reg_661_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_4_reg_909;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 31'd0;
        end else if (((icmp_ln1054_reg_661 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_88 <= add_ln1054_reg_665;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_92 <= 32'd0;
        end else if (((icmp_ln1054_reg_661 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_92 <= j_4_fu_251_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rem_fu_84 <= 32'd0;
        end else if ((1'b1 == ap_condition_724)) begin
            rem_fu_84 <= rem_2_reg_760;
        end else if ((1'b1 == ap_condition_721)) begin
            rem_fu_84 <= rem_3_reg_726;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        val_fu_96 <= 8'd0;
    end else if (((icmp_ln1065_reg_717 == 1'd1) & (icmp_ln1054_reg_661_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        val_fu_96 <= val_2_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln1054_reg_665 <= add_ln1054_fu_203_p2;
        add_ln1071_reg_744 <= add_ln1071_fu_305_p2;
        add_ln1074_reg_721 <= add_ln1074_fu_284_p2;
        add_ln1086_reg_688 <= add_ln1086_fu_224_p2;
        and_ln1071_reg_847 <= and_ln1071_fu_415_p2;
        bLast_width_reg_670 <= bLast_width_fu_209_p2;
        bLast_width_reg_670_pp0_iter1_reg <= bLast_width_reg_670;
        bLast_width_reg_670_pp0_iter2_reg <= bLast_width_reg_670_pp0_iter1_reg;
        bLast_width_reg_670_pp0_iter3_reg <= bLast_width_reg_670_pp0_iter2_reg;
        bLast_width_reg_670_pp0_iter4_reg <= bLast_width_reg_670_pp0_iter3_reg;
        icmp_ln1054_reg_661 <= icmp_ln1054_fu_198_p2;
        icmp_ln1054_reg_661_pp0_iter1_reg <= icmp_ln1054_reg_661;
        icmp_ln1054_reg_661_pp0_iter2_reg <= icmp_ln1054_reg_661_pp0_iter1_reg;
        icmp_ln1054_reg_661_pp0_iter3_reg <= icmp_ln1054_reg_661_pp0_iter2_reg;
        icmp_ln1065_reg_717 <= icmp_ln1065_fu_278_p2;
        icmp_ln1065_reg_717_pp0_iter2_reg <= icmp_ln1065_reg_717;
        icmp_ln1065_reg_717_pp0_iter3_reg <= icmp_ln1065_reg_717_pp0_iter2_reg;
        icmp_ln1074_reg_825 <= icmp_ln1074_fu_403_p2;
        icmp_ln1084_reg_684 <= icmp_ln1084_fu_219_p2;
        icmp_ln1084_reg_684_pp0_iter1_reg <= icmp_ln1084_reg_684;
        icmp_ln1084_reg_684_pp0_iter2_reg <= icmp_ln1084_reg_684_pp0_iter1_reg;
        icmp_ln1084_reg_684_pp0_iter3_reg <= icmp_ln1084_reg_684_pp0_iter2_reg;
        icmp_ln1084_reg_684_pp0_iter4_reg <= icmp_ln1084_reg_684_pp0_iter3_reg;
        localbuffer_reg_842 <= grp_fu_370_p2;
        localbuffer_reg_842_pp0_iter3_reg <= localbuffer_reg_842;
        lshr_ln1071_1_reg_862 <= lshr_ln1071_1_fu_460_p2;
        rem_1_reg_709 <= rem_fu_84;
        rem_2_reg_760 <= rem_2_fu_321_p2;
        rem_3_reg_726 <= rem_3_fu_289_p2;
        select_ln1071_2_reg_852 <= select_ln1071_2_fu_434_p3;
        shl_ln1071_1_reg_857 <= shl_ln1071_1_fu_454_p2;
        shl_ln1071_reg_898 <= grp_fu_520_p2;
        sub_ln1067_reg_739 <= sub_ln1067_fu_299_p2;
        sub_ln1071_reg_755 <= sub_ln1071_fu_315_p2;
        sub_ln1074_2_reg_832 <= sub_ln1074_2_fu_407_p2;
        sub_ln1074_3_reg_837 <= sub_ln1074_3_fu_411_p2;
        sub_ln1082_reg_679 <= sub_ln1082_fu_214_p2;
        trunc_ln1067_reg_731 <= trunc_ln1067_fu_295_p1;
        trunc_ln1071_reg_749 <= trunc_ln1071_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln1071_1_reg_887 <= and_ln1071_1_fu_525_p2;
        icmp_ln1066_reg_796 <= icmp_ln1066_fu_362_p2;
        icmp_ln1066_reg_796_pp0_iter3_reg <= icmp_ln1066_reg_796;
        icmp_ln1071_reg_817 <= icmp_ln1071_fu_394_p2;
        icmp_ln1071_reg_817_pp0_iter3_reg <= icmp_ln1071_reg_817;
        last_blk_width_cast3_cast_reg_656[3 : 0] <= last_blk_width_cast3_cast_fu_164_p1[3 : 0];
        localbuffer_4_reg_909 <= localbuffer_4_fu_574_p2;
        lshr_ln1071_reg_812 <= lshr_ln1071_fu_388_p2;
        lshr_ln1074_1_reg_877 <= lshr_ln1074_1_fu_511_p2;
        lshr_ln1074_1_reg_877_pp0_iter4_reg <= lshr_ln1074_1_reg_877;
        lshr_ln1074_reg_904 <= grp_fu_532_p2;
        lshr_ln1082_reg_704 <= lshr_ln1082_fu_245_p2;
        lshr_ln1082_reg_704_pp0_iter2_reg <= lshr_ln1082_reg_704;
        lshr_ln1082_reg_704_pp0_iter3_reg <= lshr_ln1082_reg_704_pp0_iter2_reg;
        lshr_ln1082_reg_704_pp0_iter4_reg <= lshr_ln1082_reg_704_pp0_iter3_reg;
        ptr_width_minus_reg_699 <= ptr_width_minus_fu_236_p3;
        select_ln1074_2_reg_867 <= select_ln1074_2_fu_489_p3;
        select_ln1074_3_reg_872 <= select_ln1074_3_fu_495_p3;
        sub_ln1074_1_reg_777 <= sub_ln1074_1_fu_345_p2;
        sub_ln1074_reg_772 <= sub_ln1074_fu_340_p2;
        trunc_ln1074_1_reg_790 <= trunc_ln1074_1_fu_354_p1;
        trunc_ln1074_reg_782 <= trunc_ln1074_fu_350_p1;
        val_2_reg_806 <= ldata_dout;
        val_load_reg_765 <= val_fu_96;
        xf_bits_per_clock_reg_693 <= xf_bits_per_clock_fu_230_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
    end
end

always @ (*) begin
    if (((icmp_ln1054_fu_198_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1054_reg_661 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1054_reg_661_pp0_iter3_reg == 1'd0))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_520_ce = 1'b1;
    end else begin
        grp_fu_520_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_532_ce = 1'b1;
    end else begin
        grp_fu_532_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_reg_684_pp0_iter4_reg == 1'd1))) begin
        imgInput_data_blk_n = imgInput_data_full_n;
    end else begin
        imgInput_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_reg_684_pp0_iter4_reg == 1'd1))) begin
        imgInput_data_write = 1'b1;
    end else begin
        imgInput_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_717 == 1'd1) & (icmp_ln1054_reg_661_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ldata_blk_n = ldata_empty_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op79_read_state5 == 1'b1))) begin
        ldata_read = 1'b1;
    end else begin
        ldata_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1054_fu_203_p2 = (i_fu_88 + 31'd1);

assign add_ln1071_fu_305_p2 = ($signed(zext_ln1060_1_fu_272_p1) + $signed(5'd31));

assign add_ln1074_fu_284_p2 = (last_blk_width_cast3_cast_reg_656 + 5'd7);

assign add_ln1086_fu_224_p2 = (j_fu_92 + 32'd1);

assign and_ln1071_1_fu_525_p2 = (shl_ln1071_1_reg_857 & lshr_ln1071_1_reg_862);

assign and_ln1071_2_fu_563_p2 = (xor_ln1071_3_fu_558_p2 & localbuffer_3_fu_537_p3);

assign and_ln1071_3_fu_569_p2 = (select_ln1071_3_fu_552_p3 & and_ln1071_1_reg_887);

assign and_ln1071_fu_415_p2 = (val_2_reg_806 & lshr_ln1071_reg_812);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = ((imgInput_data_full_n == 1'b0) & (icmp_ln1084_reg_684_pp0_iter4_reg == 1'd1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((ldata_empty_n == 1'b0) & (ap_predicate_op79_read_state5 == 1'b1));
end

always @ (*) begin
    ap_condition_302 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_721 = ((icmp_ln1065_reg_717 == 1'd0) & (icmp_ln1054_reg_661_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_724 = ((icmp_ln1065_reg_717 == 1'd1) & (icmp_ln1054_reg_661_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 = 'bx;

always @ (*) begin
    ap_predicate_op79_read_state5 = ((icmp_ln1065_reg_717 == 1'd1) & (icmp_ln1054_reg_661_pp0_iter1_reg == 1'd1));
end

assign bLast_width_fu_209_p2 = ((j_fu_92 == sub) ? 1'b1 : 1'b0);

assign grp_fu_370_p1 = sub_ln1067_reg_739;

assign grp_fu_520_p1 = select_ln1071_2_reg_852;

assign grp_fu_532_p1 = select_ln1074_3_reg_872;

assign icmp_ln1054_fu_198_p2 = (($signed(zext_ln1054_fu_194_p1) < $signed(bound)) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_278_p2 = (($signed(rem_fu_84) < $signed(zext_ln1060_fu_269_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1066_fu_362_p2 = ((rem_1_reg_709 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1071_fu_394_p2 = ((rem_1_reg_709 > sext_ln1071_fu_376_p1) ? 1'b1 : 1'b0);

assign icmp_ln1074_fu_403_p2 = ((sub_ln1074_1_reg_777 > sub_ln1074_reg_772) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_219_p2 = (($signed(j_fu_92) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign imgInput_data_din = (select_ln1059_fu_584_p3 & ap_phi_reg_pp0_iter5_localbuffer_1_reg_155);

assign j_4_fu_251_p3 = ((bLast_width_reg_670[0:0] == 1'b1) ? 32'd0 : add_ln1086_reg_688);

assign last_blk_width_cast3_cast_fu_164_p1 = last_blk_width_cast3;

assign localbuffer_3_fu_537_p3 = ((icmp_ln1066_reg_796_pp0_iter3_reg[0:0] == 1'b1) ? 8'd0 : localbuffer_reg_842_pp0_iter3_reg);

assign localbuffer_4_fu_574_p2 = (and_ln1071_3_fu_569_p2 | and_ln1071_2_fu_563_p2);

assign localbuffer_5_fu_580_p2 = (lshr_ln1074_reg_904 & lshr_ln1074_1_reg_877_pp0_iter4_reg);

assign lshr_ln1071_1_fu_460_p2 = 8'd255 >> zext_ln1071_3_fu_450_p1;

assign lshr_ln1071_fu_388_p2 = 8'd255 >> zext_ln1071_fu_384_p1;

assign lshr_ln1074_1_fu_511_p2 = 8'd255 >> zext_ln1074_2_fu_507_p1;

assign lshr_ln1082_fu_245_p2 = 8'd255 >> zext_ln1082_fu_242_p1;

assign ptr_width_minus_fu_236_p3 = ((bLast_width_reg_670[0:0] == 1'b1) ? sub3 : 5'd0);

assign rem_2_fu_321_p2 = ($signed(rem_fu_84) + $signed(sext_ln1061_fu_275_p1));

assign rem_3_fu_289_p2 = (rem_fu_84 - zext_ln1060_fu_269_p1);

assign select_ln1059_fu_584_p3 = ((bLast_width_reg_670_pp0_iter4_reg[0:0] == 1'b1) ? lshr_ln1082_reg_704_pp0_iter4_reg : 8'd255);

assign select_ln1071_1_fu_429_p3 = ((icmp_ln1071_reg_817[0:0] == 1'b1) ? trunc_ln1071_reg_749 : trunc_ln1067_reg_731);

assign select_ln1071_2_fu_434_p3 = ((icmp_ln1071_reg_817[0:0] == 1'b1) ? xor_ln1071_1_fu_419_p2 : trunc_ln1067_reg_731);

assign select_ln1071_3_fu_552_p3 = ((icmp_ln1071_reg_817_pp0_iter3_reg[0:0] == 1'b1) ? tmp_10_fu_543_p4 : shl_ln1071_reg_898);

assign select_ln1071_fu_424_p3 = ((icmp_ln1071_reg_817[0:0] == 1'b1) ? trunc_ln1067_reg_731 : trunc_ln1071_reg_749);

assign select_ln1074_1_fu_484_p3 = ((icmp_ln1074_reg_825[0:0] == 1'b1) ? sub_ln1074_2_reg_832 : sub_ln1074_3_reg_837);

assign select_ln1074_2_fu_489_p3 = ((icmp_ln1074_reg_825[0:0] == 1'b1) ? tmp_11_fu_470_p4 : val_load_reg_765);

assign select_ln1074_3_fu_495_p3 = ((icmp_ln1074_reg_825[0:0] == 1'b1) ? xor_ln1074_fu_479_p2 : trunc_ln1074_reg_782);

assign select_ln1074_fu_330_p3 = ((bLast_width_reg_670_pp0_iter1_reg[0:0] == 1'b1) ? add_ln1074_reg_721 : 5'd15);

assign sext_ln1061_fu_275_p1 = $signed(ptr_width_minus_reg_699);

assign sext_ln1071_fu_376_p1 = add_ln1071_reg_744;

assign shl_ln1071_1_fu_454_p2 = 8'd255 << zext_ln1071_2_fu_446_p1;

assign sub_ln1067_fu_299_p2 = (3'd0 - trunc_ln1067_fu_295_p1);

assign sub_ln1071_fu_315_p2 = (trunc_ln1071_fu_311_p1 - trunc_ln1067_fu_295_p1);

assign sub_ln1074_1_fu_345_p2 = (32'd8 - rem_1_reg_709);

assign sub_ln1074_2_fu_407_p2 = (trunc_ln1074_reg_782 - trunc_ln1074_1_reg_790);

assign sub_ln1074_3_fu_411_p2 = (trunc_ln1074_1_reg_790 - trunc_ln1074_reg_782);

assign sub_ln1074_fu_340_p2 = (zext_ln1074_fu_336_p1 - rem_1_reg_709);

assign sub_ln1082_fu_214_p2 = (3'd0 - empty);

integer ap_tvar_int_0;

always @ (shl_ln1071_reg_898) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_10_fu_543_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_543_p4[ap_tvar_int_0] = shl_ln1071_reg_898[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (val_load_reg_765) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_11_fu_470_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_470_p4[ap_tvar_int_1] = val_load_reg_765[7 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln1067_fu_295_p1 = rem_fu_84[2:0];

assign trunc_ln1071_fu_311_p1 = add_ln1071_fu_305_p2[2:0];

assign trunc_ln1074_1_fu_354_p1 = sub_ln1074_fu_340_p2[2:0];

assign trunc_ln1074_fu_350_p1 = sub_ln1074_1_fu_345_p2[2:0];

assign xf_bits_per_clock_fu_230_p3 = ((bLast_width_reg_670[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln1071_1_fu_419_p2 = (trunc_ln1067_reg_731 ^ 3'd7);

assign xor_ln1071_2_fu_440_p2 = (select_ln1071_fu_424_p3 ^ 3'd7);

assign xor_ln1071_3_fu_558_p2 = (8'd255 ^ and_ln1071_1_reg_887);

assign xor_ln1071_fu_379_p2 = (sub_ln1071_reg_755 ^ 3'd7);

assign xor_ln1074_1_fu_501_p2 = (select_ln1074_1_fu_484_p3 ^ 3'd7);

assign xor_ln1074_fu_479_p2 = (trunc_ln1074_reg_782 ^ 3'd7);

assign zext_ln1054_fu_194_p1 = i_fu_88;

assign zext_ln1060_1_fu_272_p1 = xf_bits_per_clock_reg_693;

assign zext_ln1060_fu_269_p1 = xf_bits_per_clock_reg_693;

assign zext_ln1071_2_fu_446_p1 = select_ln1071_1_fu_429_p3;

assign zext_ln1071_3_fu_450_p1 = xor_ln1071_2_fu_440_p2;

assign zext_ln1071_fu_384_p1 = xor_ln1071_fu_379_p2;

assign zext_ln1074_2_fu_507_p1 = xor_ln1074_1_fu_501_p2;

assign zext_ln1074_fu_336_p1 = select_ln1074_fu_330_p3;

assign zext_ln1082_fu_242_p1 = sub_ln1082_reg_679;

always @ (posedge ap_clk) begin
    last_blk_width_cast3_cast_reg_656[4] <= 1'b0;
end

endmodule //Filter2d_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow
